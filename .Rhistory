temp <- temp[order(temp$COURT_INDEX_NUMBER),] #ordered by court index number
duplicated((evictionTable))
temp <- temp[order(temp$COURT_INDEX_NUMBER),] #ordered by court index number
View(temp)
duplicated(uniqueEvictionTable)
uniqueEvictionTable[duplicated(uniqueEvictionTable),]
View(evictionTable)
View(evictionTableWithDupDockets)
View(evictionTableWithDupDockets)
View(evictionTableWithDupIndices)
View(evictionTableWithDupIndices)
duplicated(c(1,2,3,2,1,3))
duplicated(c(1,2,3,2,1,3,3,3))
!duplicated(c(1,2,3,2,1,3,3,3))
temp <- evictionTable[!duplicated(evictionTable),] #these are the rows that are complete duplicates in every field
uniqueIndices <- indexList[!duplicated(indexList)]
length(uniqueIndices)
evictionTableWithDupIndices[10:20,] #This indicates that most of the court index numbers are unique, but there are a couple of times, when they are not. The times when they are not unique,
evictionTableWithDupIndices[10:20,] #This indicates that most of the court index numbers are unique, but there are a couple of times, when they are not. The times when they are not unique,
duplicateIndices <- indexList[duplicated(indexList)] #same process as with the Docket Numbers
length(duplicateIndices) #this time there seems to be 2583 instances where a previous court index number was entered again
2583+37565
evictionTable$COURT_INDEX_NUMBER %in% duplicateIndices
duplicateIndices %in% evictionTable$COURT_INDEX_NUMBER
sum(evictionTable$COURT_INDEX_NUMBER %in% duplicateIndices)
evictionTable$COURT_INDEX_NUMBER %in% duplicateIndices
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable),] #Eviction table removing duplicate rows
evictionTable$COURT_INDEX_NUMBER %in% duplicateIndices
evictionTableWithDupIndices <- subset(evictionTable, evictionTable$COURT_INDEX_NUMBER %in% duplicateIndices) #again, same process creating a new table to visualize
evictionTableWithDupIndices <- evictionTableWithDupIndices[order(evictionTableWithDupIndices$COURT_INDEX_NUMBER),] #ordering by court index
evictionTableWithDupIndices[10:20,] #This indicates that most of the court index numbers are unique, but there are a couple of times, when they are not. The times when they are not unique,
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),]
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER","DOCKET_NUMBER")]),] #Thisevictions with rows removing both duplicate court index numbers and duplicate docket numbers removed
uniqueIndices <- indexList[!duplicated(indexList)] # creates a vector of the unique court index numbers
length(uniqueIndices) ##37565 unique court index numbers
uniqueIndices
evictionTableWithDupIndices <- subset(evictionTable, evictionTable$COURT_INDEX_NUMBER %in% uniqueIndices) #again, same process creating a new table to visualize
evictionTableWithDupIndices <- evictionTableWithDupIndices[order(evictionTableWithDupIndices$COURT_INDEX_NUMBER),] #ordering by court index
evictionTableWithDupIndices[10:20,] #This indicates that most of the court index numbers are unique, but there are a couple of times, when they are not. The times when they are not unique,
evictionTableWithDupIndices <- subset(evictionTable, uniqueIndices %in% evictionTable$COURT_INDEX_NUMBER) #again, same process creating a new table to visualize
evictionTableWithDupIndices <- evictionTableWithDupIndices[order(evictionTableWithDupIndices$COURT_INDEX_NUMBER),] #ordering by court index
#it seems like it is the same apartment getting served by the Marshals on different dates
#However, when the court index number is not unique, the docket number is. With that in mind, it seems like the closest estimation
#We can come to is filtering the initial "evictionTable" by rows with unique "COURT_INDEX_NUMBER"'s and unique "DOCKET_NUMBER"'s
evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),]
#it seems like it is the same apartment getting served by the Marshals on different dates
#However, when the court index number is not unique, the docket number is. With that in mind, it seems like the closest estimation
#We can come to is filtering the initial "evictionTable" by rows with unique "COURT_INDEX_NUMBER"'s and unique "DOCKET_NUMBER"'s
head(evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),])
#it seems like it is the same apartment getting served by the Marshals on different dates
#However, when the court index number is not unique, the docket number is. With that in mind, it seems like the closest estimation
#We can come to is filtering the initial "evictionTable" by rows with unique "COURT_INDEX_NUMBER"'s and unique "DOCKET_NUMBER"'s
length(evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),])
#it seems like it is the same apartment getting served by the Marshals on different dates
#However, when the court index number is not unique, the docket number is. With that in mind, it seems like the closest estimation
#We can come to is filtering the initial "evictionTable" by rows with unique "COURT_INDEX_NUMBER"'s and unique "DOCKET_NUMBER"'s
nrow(evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),])
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),]
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER","DOCKET_NUMBER")]),] #Thisevictions with rows removing both duplicate court index numbers and duplicate docket numbers removed
uniqueEvictionTable[duplicated(uniqueEvictionTable),] #no duplicate rows in this table
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),]
View(uniqueEvictionTable)
indexList <- evictionTable$COURT_INDEX_NUMBER #creates a vector just like "docketList"
duplicateIndices <- indexList[duplicated(indexList)] #same process as with the Docket Numbers
length(duplicateIndices) #this time there seems to be 2583 instances where a previous court index number was entered again
uniqueIndices <- indexList[!duplicated(indexList)] # creates a vector of the unique court index numbers
length(uniqueIndices) ##37565 unique court index numbers
evictionTable$COURT_INDEX_NUMBER %in% duplicateIndices
evictionTableWithDupIndices <- subset(evictionTable, evictionTable$COURT_INDEX_NUMBER %in% duplicateIndices) #again, same process creating a new table to visualize
evictionTableWithDupIndices <- evictionTableWithDupIndices[order(evictionTableWithDupIndices$COURT_INDEX_NUMBER),] #ordering by court index
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER")]),]
evictionTableWithDupIndices[10:20,] #This indicates that most of the court index numbers are unique, but there are a couple of times, when they are not. The times when they are not unique,
uniqueEvictionTable <- evictionTable[!duplicated(evictionTable[c("COURT_INDEX_NUMBER","DOCKET_NUMBER")]),] #Thisevictions with rows removing both duplicate court index numbers and duplicate docket numbers removed
uniqueEvictionTable[duplicated(uniqueEvictionTable),] #no duplicate rows in this table
View(evictionTable)
str(evictionTable)
as.date(EXECUTED_DATE, format = "%m/%d/%Y")
as.Date(EXECUTED_DATE, format = "%m/%d/%Y")
as.Date(evictionTable$EXECUTED_DATE, format = "%m/%d/%Y")
str(evictionTable)
evictionTable$EXECUTED_DATE <- as.Date(evictionTable$EXECUTED_DATE, format = "%m/%d/%Y")
str(evictionTable)
evictionTable <- read.csv("C:/Users/aaron/Downloads/Evictions.csv") #imports eviction CSV. Change this to your file path
evictionTable <- read.csv("C:/Users/aaron/Downloads/Evictions.csv") #imports eviction CSV. Change this to your file path
evictionTable$EXECUTED_DATE <- as.Date(evictionTable$EXECUTED_DATE, format = "%m/%d/%Y") #changes the executed date type from factor to date. this will allow for better manipulations.
evictiontable_2017 <- evictionTable[evictionTable$EXECUTED_DATE >= "2017-01-01" & evictionTable$EXECUTED_DATE <= "2017-12-31"]
evictionTable$EXECUTED_DATE
evictiontable_2017 <- evictionTable[evictionTable$EXECUTED_DATE >= "2017-01-01" & evictionTable$EXECUTED_DATE <= "2017-12-31"]
evictiontable_2017 <- evictionTable[evictionTable$EXECUTED_DATE >= "2017-01-01" & evictionTable$EXECUTED_DATE <= "2017-12-31"]
evictiontable_2017 <- evictionTable[evictionTable$EXECUTED_DATE <= "2017-12-31"]
evictiontable_2017 <- evictionTable$EXECUTED_DATE[evictionTable$EXECUTED_DATE >= "2017-01-01" & evictionTable$EXECUTED_DATE <= "2017-12-31"]
length(evictionTable_2017)
length(evictiontable_2017)
View(evictionTable)
evictionTable <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/Evictions.csv") #imports marshal eviction data CSV. Change this to your file path
evictionTable$EXECUTED_DATE <- as.Date(evictionTable$EXECUTED_DATE, format = "%m/%d/%Y") #changes the executed date type from factor to date. this will allow for better manipulations.
commercialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND == "Commercial",] #Only Commercial Evictions
residentialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND != "Commercial",] #Only Residential Evictions
residentialEvictiontable_2017_withDups <- residentialEvictions[residentialEvictions$EXECUTED_DATE >= "2017-01-01" & residentialEvictions$EXECUTED_DATE <= "2017-12-31",] #Residential Eviction Orders in 2017 with duplicates
residentialEvictiontable_2017 <- residentialEvictiontable_2017_withDups[!duplicated(residentialEvictiontable_2017_withDups),] #Residential Eviction Orders in 2017 with no duplicates******
#Something is up with some of John Villanueva's evictions. He will list the same eviction twice
duplicates <- residentialEvictiontable_2017_withDups[duplicated(residentialEvictiontable_2017_withDups),] #LOOK INTO THIS
evicZips <- data.frame(table(residentialEvictiontable_2017$EVICTION_ZIP)) #creates a new table with all the zip codes with evictions and the number of evictions in each
colnames(evicZips) <- c('Zip.Code', 'evictions') #rename columns
masterZips <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYczips.csv") #master list of every zip code in NYS
masterZips <- merge(masterZips, evicZips, by = "Zip.Code", all.x = TRUE) #merges based on common zip codes
View(masterZips)
View(evicZips)
View(masterZips)
masterZips <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYczips.csv") #master list of every zip code in NYS
View(masterZips)
masterZips <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYczips.csv") #master list of every zip code in NYS
masterZips <- merge(masterZips, evicZips, by = "Zip.Code", all.x = TRUE) #merges based on common zip codes
masterZips[is.na(masterZips)] <- 0 # sets all na values equal to zero
#Population data by zip code
zipPops <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/New York Population by Zip Code from 2010 U.S. Census.csv") #Imports NYS zip code populations from the U.S. Census
zipPops$Zip.Code <- as.numeric(str_extract(zipPops$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipPops, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
library(stringr)
#Median Household Income
zipIncome <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/medianHouseholdIncomebyZip.csv") #Imports income data
zipIncome$Zip.Code <- as.numeric(str_extract(zipIncome$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipIncome, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
#Population data by zip code
zipPops <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/New York Population by Zip Code from 2010 U.S. Census.csv") #Imports NYS zip code populations from the U.S. Census
zipPops$Zip.Code <- as.numeric(str_extract(zipPops$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipPops, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
library(dplyr)
library(jsonlite)
library(stringr)
evictionTable <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/Evictions.csv") #imports marshal eviction data CSV. Change this to your file path
evictionTable$EXECUTED_DATE <- as.Date(evictionTable$EXECUTED_DATE, format = "%m/%d/%Y") #changes the executed date type from factor to date. this will allow for better manipulations.
commercialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND == "Commercial",] #Only Commercial Evictions
residentialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND != "Commercial",] #Only Residential Evictions
residentialEvictiontable_2017_withDups <- residentialEvictions[residentialEvictions$EXECUTED_DATE >= "2017-01-01" & residentialEvictions$EXECUTED_DATE <= "2017-12-31",] #Residential Eviction Orders in 2017 with duplicates
residentialEvictiontable_2017 <- residentialEvictiontable_2017_withDups[!duplicated(residentialEvictiontable_2017_withDups),] #Residential Eviction Orders in 2017 with no duplicates******
#Something is up with some of John Villanueva's evictions. He will list the same eviction twice
duplicates <- residentialEvictiontable_2017_withDups[duplicated(residentialEvictiontable_2017_withDups),] #LOOK INTO THIS
evicZips <- data.frame(table(residentialEvictiontable_2017$EVICTION_ZIP)) #creates a new table with all the zip codes with evictions and the number of evictions in each
colnames(evicZips) <- c('Zip.Code', 'evictions') #rename columns
masterZips <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYczips.csv") #master list of every zip code in NYS
masterZips <- merge(masterZips, evicZips, by = "Zip.Code", all.x = TRUE) #merges based on common zip codes
masterZips[is.na(masterZips)] <- 0 # sets all na values equal to zero
#Population data by zip code
zipPops <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/New York Population by Zip Code from 2010 U.S. Census.csv") #Imports NYS zip code populations from the U.S. Census
zipPops$Zip.Code <- as.numeric(str_extract(zipPops$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipPops, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
#Median Household Income
zipIncome <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/medianHouseholdIncomebyZip.csv") #Imports income data
zipIncome$Zip.Code <- as.numeric(str_extract(zipIncome$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipIncome, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
export <- toJSON(masterZips) #converts dataframe to json format
masterZips <- masterZips[!duplicated(masterZips),]
export <- toJSON(masterZips) #converts dataframe to json format
write(export, 'C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/zipCodeStats.json')
zipToNeighborhoods <- read.csv("C:\Users\aaron\OneDrive\Documents\Columbia Journalism\Universal Access to Counsel\marshalEvictionData\NYCzipstoPumatoNeighborhood.csv")
zipToNeighborhoods <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYCzipstoPumatoNeighborhood.csv")
zipToNeighborhoods
zipToNeighborhoods$puma10 <- NULL
zip
zipToNeighborhoods
masterZips <- merge(masterZips, zipToNeighborhoods, by = "Zip.Code", all.x = TRUE)
library(dplyr)
library(jsonlite)
library(stringr)
evictionTable <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/Evictions.csv") #imports marshal eviction data CSV. Change this to your file path
evictionTable$EXECUTED_DATE <- as.Date(evictionTable$EXECUTED_DATE, format = "%m/%d/%Y") #changes the executed date type from factor to date. this will allow for better manipulations.
commercialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND == "Commercial",] #Only Commercial Evictions
residentialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND != "Commercial",] #Only Residential Evictions
residentialEvictiontable_2017_withDups <- residentialEvictions[residentialEvictions$EXECUTED_DATE >= "2017-01-01" & residentialEvictions$EXECUTED_DATE <= "2017-12-31",] #Residential Eviction Orders in 2017 with duplicates
residentialEvictiontable_2017 <- residentialEvictiontable_2017_withDups[!duplicated(residentialEvictiontable_2017_withDups),] #Residential Eviction Orders in 2017 with no duplicates******
#Something is up with some of John Villanueva's evictions. He will list the same eviction twice
duplicates <- residentialEvictiontable_2017_withDups[duplicated(residentialEvictiontable_2017_withDups),] #LOOK INTO THIS
evicZips <- data.frame(table(residentialEvictiontable_2017$EVICTION_ZIP)) #creates a new table with all the zip codes with evictions and the number of evictions in each
colnames(evicZips) <- c('Zip.Code', 'evictions') #rename columns
masterZips <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYczips.csv") #master list of every zip code in NYS
masterZips <- merge(masterZips, evicZips, by = "Zip.Code", all.x = TRUE) #merges based on common zip codes
masterZips[is.na(masterZips)] <- 0 # sets all na values equal to zero
#Population data by zip code
zipPops <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/New York Population by Zip Code from 2010 U.S. Census.csv") #Imports NYS zip code populations from the U.S. Census
masterZips <- merge(masterZips, zipPops, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
zipPops$Zip.Code <- as.numeric(str_extract(zipPops$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
#Median Household Income
zipIncome <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/medianHouseholdIncomebyZip.csv") #Imports income data
zipIncome$Zip.Code <- as.numeric(str_extract(zipIncome$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipIncome, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
zipToNeighborhoods <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYCzipstoPumatoNeighborhood.csv")
zipToNeighborhoods$puma10 <- NULL
masterZips <- merge(masterZips, zipToNeighborhoods, by = "Zip.Code", all.x = TRUE)
masterZips <- masterZips[!duplicated(masterZips),]
#Population data by zip code
zipPops <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/New York Population by Zip Code from 2010 U.S. Census.csv") #Imports NYS zip code populations from the U.S. Census
zipPops$Zip.Code <- as.numeric(str_extract(zipPops$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipPops, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
#Median Household Income
zipIncome <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/medianHouseholdIncomebyZip.csv") #Imports income data
zipIncome$Zip.Code <- as.numeric(str_extract(zipIncome$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipIncome, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
zipToNeighborhoods <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYCzipstoPumatoNeighborhood.csv")
zipToNeighborhoods$puma10 <- NULL
masterZips <- merge(masterZips, zipToNeighborhoods, by = "Zip.Code", all.x = TRUE)
masterZips <- masterZips[!duplicated(masterZips),]
evictionTable <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/Evictions.csv") #imports marshal eviction data CSV. Change this to your file path
evictionTable$EXECUTED_DATE <- as.Date(evictionTable$EXECUTED_DATE, format = "%m/%d/%Y") #changes the executed date type from factor to date. this will allow for better manipulations.
commercialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND == "Commercial",] #Only Commercial Evictions
residentialEvictions <- evictionTable[evictionTable$RESIDENTIAL_COMMERCIAL_IND != "Commercial",] #Only Residential Evictions
residentialEvictiontable_2017_withDups <- residentialEvictions[residentialEvictions$EXECUTED_DATE >= "2017-01-01" & residentialEvictions$EXECUTED_DATE <= "2017-12-31",] #Residential Eviction Orders in 2017 with duplicates
residentialEvictiontable_2017 <- residentialEvictiontable_2017_withDups[!duplicated(residentialEvictiontable_2017_withDups),] #Residential Eviction Orders in 2017 with no duplicates******
#Something is up with some of John Villanueva's evictions. He will list the same eviction twice
duplicates <- residentialEvictiontable_2017_withDups[duplicated(residentialEvictiontable_2017_withDups),] #LOOK INTO THIS
evicZips <- data.frame(table(residentialEvictiontable_2017$EVICTION_ZIP)) #creates a new table with all the zip codes with evictions and the number of evictions in each
colnames(evicZips) <- c('Zip.Code', 'evictions') #rename columns
masterZips <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYczips.csv") #master list of every zip code in NYS
masterZips <- merge(masterZips, evicZips, by = "Zip.Code", all.x = TRUE) #merges based on common zip codes
masterZips[is.na(masterZips)] <- 0 # sets all na values equal to zero
#Population data by zip code
zipPops <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/New York Population by Zip Code from 2010 U.S. Census.csv") #Imports NYS zip code populations from the U.S. Census
zipPops$Zip.Code <- as.numeric(str_extract(zipPops$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipPops, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
#Median Household Income
zipIncome <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/medianHouseholdIncomebyZip.csv") #Imports income data
zipIncome$Zip.Code <- as.numeric(str_extract(zipIncome$Zip.Code, "[0-9]{5}")) #cleans the string so we're just working with the zip code numbers
masterZips <- merge(masterZips, zipIncome, by = "Zip.Code", all.x = TRUE) #merges tables based on common zip codes
zipToNeighborhoods <- read.csv("C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/NYCzipstoPumatoNeighborhood.csv")
zipToNeighborhoods$puma10 <- NULL
masterZips <- merge(masterZips, zipToNeighborhoods, by = "Zip.Code", all.x = TRUE)
masterZips <- masterZips[!duplicated(masterZips),]
export <- toJSON(masterZips) #converts dataframe to json format
write(export, 'C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Universal Access to Counsel/marshalEvictionData/zipCodeStats.json')
install.packages("dplyr")
geojson <- readlines('at_centerline.geojson')
library(jsonlite)
geojson <- readlines('at_centerline.geojson')
geojson <- load('at_centerline.geojson')
geojson <- load('at_centerline.geojson')
geojson <- load('./at_centerline.geojson')
geojson <- load('"C:\Users\aaron\OneDrive\Documents\Columbia Journalism\Narrative Writing\Appalachian Trail Map\at_centerline.geojson"')
geojson <- load('"C:/Users/aaron/OneDrive/Documents/Columbia Journalism/Narrative Writing/Appalachian Trail Map/at_centerline.geojson"')
demData = read.csv("C:/Users/aaron/Downloads/nyc_census_by_boro_2000-2010.csv")
demData
view(demData)
View(demData)
demdata[X2000_total_population]
demData = read.csv("C:/Users/aaron/Downloads/nyc_census_by_boro_2000-2010.csv")
demdata[X2000_total_population]
demData[X2000_total_population]
demData[10]
demData["X200_total_population"]
demData[,"X200_total_population"]
demData["X200_total_population",]
demData["X2000_total_population",]
demData[,"X2000_total_population"]
demData[,10]
demData[10]
demData[10,]
demData[10]
demData[1]
demData[2]
(demData[2]-demData[10])/demData[10]
demData[2,10]
demData[,2-10]
demData[,2-3]
demData[,2-3]
demData[,2]
demData[,c(2,10)]
popPercentChange = demData[,c(2,10)]
popPercentChange["percent change"] = 100*(demData[2]-demData[10])/demData[10])
popPercentChange["percent change"] = 100*((demData[2]-demData[10])/demData[10])
View(popPercentChange)
popPercentChange["people added"] = popPercentChange[1]-popPercentChange[2]
popPercentChange = demData[,c(1,2,10)]
popPercentChange["percent change"] = 100*((demData[2]-demData[10])/demData[10])
popPercentChange["people added"] = popPercentChange[1]-popPercentChange[2]
popPercentChange = demData[,c(1,2,10)]
popPercentChange = demData[,c(1,2,10)]
popPercentChange["percent change"] = 100*((popPercentChange[2]-popPercentChange[3])/popPercentChange[3])
popPercentChange["people added"] = popPercentChange[2]-popPercentChange[3]
View(popPercentChange)
demData[,4]
demData[1,4]
demData[,4:5]
demData[,4:6]
demData[,7:10]
demData[,c(9,10,14,15)]
demData[,c(8,9,16,17)]
ownerOccupiedHousing = demData[,c(8,9)]
ownerOccupiedHousing["rented units"] = ownerOccupiedHousing[8]-ownerOccupiedHousing[9]
ownerOccupiedHousing["rented units"] = ownerOccupiedHousing[1]-ownerOccupiedHousing[2]
View(ownerOccupiedHousing)
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
View(ownerOccupiedHousing)
ownerOccupiedHousing["rented units"]
colnames(demData[1])
colnames(demData[16])
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17])] = c(demData[16],demData[17])
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[5]-ownerOccupiedHousing[6]
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["2010 rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[5]-ownerOccupiedHousing[6]
ownerOccupiedHousing["change in rented units"] = ownerOccupiedHousing[4]-ownerOccupiedHousing[7]
ownerOccupiedHousing["percent change in rented units"] = ownerOccupiedHousing[8]/ownerOccupiedHousing[7]*100
sum(ownerOccupiedHousing[4])
ownerOccupiedHousing["2010 percent of rentable units in the city"] = 100*ownerOccupiedHousing[4]/sum(ownerOccupiedHousing[4])
ownerOccupiedHousing["2010 percent of rentable units in the city"] = 100*(ownerOccupiedHousing[4]/demdata[2])/sum(ownerOccupiedHousing[4]/demdata[2])
ownerOccupiedHousing["2010 percent of rentable units in the city"] = 100*(ownerOccupiedHousing[4]/demData[2])/sum(ownerOccupiedHousing[4]/demData[2])
colnames(demdata[4])
colnames(demData[4])
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["2010 rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
ownerOccupiedHousing["2010 % of rentable units"] = 100*(ownerOccupiedHousing[4]/demData[4])
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[6]-ownerOccupiedHousing[7]
ownerOccupiedHousing["2000 % of rentable units"] = 100*(ownerOccupiedHousing[8]/demData[12])
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["2010 rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
ownerOccupiedHousing["2010 % of rentable units"] = 100*(ownerOccupiedHousing[4]/demData[4])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[6]-ownerOccupiedHousing[7]
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 % of rentable units"] = 100*(ownerOccupiedHousing[8]/demData[12])
ownerOccupiedHousing["change in rented units"] = ownerOccupiedHousing[4]-ownerOccupiedHousing[8]
ownerOccupiedHousing["percent change in rented units"] = ownerOccupiedHousing[9]/ownerOccupiedHousing[9]*100
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["2010 rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
ownerOccupiedHousing["2010 % of rentable units"] = 100*(ownerOccupiedHousing[4]/demData[4])
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[6]-ownerOccupiedHousing[7]
ownerOccupiedHousing["2000 % of rentable units"] = 100*(ownerOccupiedHousing[8]/demData[12])
ownerOccupiedHousing["change in rented units"] = ownerOccupiedHousing[4]-ownerOccupiedHousing[8]
ownerOccupiedHousing["percent change in rented units"] = ownerOccupiedHousing[9]/ownerOccupiedHousing[9]*100
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["2010 rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
ownerOccupiedHousing["2010 % of rentable units"] = 100*(ownerOccupiedHousing[4]/demData[4])
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[6]-ownerOccupiedHousing[7]
ownerOccupiedHousing["2000 % of rentable units"] = 100*(ownerOccupiedHousing[8]/demData[12])
ownerOccupiedHousing["change in rented units"] = ownerOccupiedHousing[4]-ownerOccupiedHousing[8]
ownerOccupiedHousing["change in rented units per person"] = ownerOccupiedHousing[9]/demData[2]
ownerOccupiedHousing["change in rented units per person"] = 100000*ownerOccupiedHousing[9]/demData[2]
ownerOccupiedHousing["change in rented units per person"] = ownerOccupiedHousing[9]/demData[2]
ownerOccupiedHousing["change in rented units per person"] = ownerOccupiedHousing[9]/demData[13]
ownerOccupiedHousing["change in rented units per household"] = 100*ownerOccupiedHousing[9]/demData[13]
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["2010 rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
ownerOccupiedHousing["2010 % of rentable units"] = 100*(ownerOccupiedHousing[4]/demData[4])
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[6]-ownerOccupiedHousing[7]
ownerOccupiedHousing["2000 % of rentable units"] = 100*(ownerOccupiedHousing[8]/demData[12])
ownerOccupiedHousing["change in rented units"] = ownerOccupiedHousing[4]-ownerOccupiedHousing[8]
ownerOccupiedHousing["change in rented units per household"] = 100*ownerOccupiedHousing[9]/demData[13]
ownerOccupiedHousing["change in rented units per household"] = 100*(ownerOccupiedHousing[9])/demData[13]
ownerOccupiedHousing["change in rented units per household"] = 100*(ownerOccupiedHousing[9])/demData[13100*]
ownerOccupiedHousing[3]/ownerOccupiedHousing[2]*100
ownerOccupiedHousing[7]/ownerOccupiedHousing[6]*100
demData[,c(1,demData[6]-demData[4])]
demData[6]-demData[4]
demData[6]-demData[14]
demData[14]
demData[6]
demData[6]-demData[14]
demData[1]
demData[3]/demData[2]
1-(demData[3]/demData[2])
sum(demData[2])
sum(demData[2,4]+demData[2,2])
demData[2,4]
sum(demData[4,2]+demData[2,2])
demData[,2]
demData[2]
demData[2]/sum(demData[2])
ownerOccupiedHousing = demData[,c(1,8,9)]
demData = read.csv("C:/Users/aaron/Downloads/nyc_census_by_boro_2000-2010.csv")
View(demData)
ownerOccupiedHousing = demData[,c(1,8,9)]
ownerOccupiedHousing["2010 rented units"] = ownerOccupiedHousing[2]-ownerOccupiedHousing[3]
ownerOccupiedHousing["2010 % of rentable units"] = 100*(ownerOccupiedHousing[4]/demData[4])
ownerOccupiedHousing[,c(colnames(demData[16]),colnames(demData[17]))] = c(demData[16],demData[17])
ownerOccupiedHousing["2000 rented units"] = ownerOccupiedHousing[6]-ownerOccupiedHousing[7]
ownerOccupiedHousing["2000 % of rentable units"] = 100*(ownerOccupiedHousing[8]/demData[12])
ownerOccupiedHousing["change in rented units"] = ownerOccupiedHousing[4]-ownerOccupiedHousing[8]
ownerOccupiedHousing["change in rented units per household"] = 100*(ownerOccupiedHousing[9])/demData[13]
ownerOccupiedHousing[3]/ownerOccupiedHousing[2]*100
ownerOccupiedHousing[7]/ownerOccupiedHousing[6]*100
100-ownerOccupiedHousing[5]
popPercentChange = demData[,c(1,2,10)]
popPercentChange["people added"] = popPercentChange[2]-popPercentChange[3]
popPercentChange["percent change"] = 100*((popPercentChange[2]-popPercentChange[3])/popPercentChange[3])
demData = read.csv("C:/Users/aaron/Downloads/nyc_census_by_boro_2000-2010.csv")
popPercentChange = demData[,c(1,2,10)]
popPercentChange["percent change"] = 100*((popPercentChange[2]-popPercentChange[3])/popPercentChange[3])
popPercentChange["people added"] = popPercentChange[2]-popPercentChange[3]
View(popPercentChange)
read.csv("citibikeTripdata-Jan-2019.csv")
read.csv("citibikeTripdata-Jan-2019.csv")
getwd()
read.csv("Columbia Computer Science/Introduction to Data Visualization/Exploratory Data Analysis/citibikeTripdata-Jan-2019.csv")
citibikeData <- read.csv("Columbia Computer Science/Introduction to Data Visualization/Exploratory Data Analysis/citibikeTripdata-Jan-2019.csv")
view(citibikeData)
View(citibikeData)
library(dpylr)
library(dplyr)
citibikeData <- read.csv("Columbia Computer Science/Introduction to Data Visualization/Exploratory Data Analysis/citibikeTripdata-Jan-2019.csv")
citibikeData[start.station.name]
citibikeData["start.station.name"]
distinct(citibikeData["start.station.name"])
citibikeData <- read.csv("Columbia Computer Science/Introduction to Data Visualization/Exploratory Data Analysis/201901-citibike-tripdata.csv")
distinct(citibikeData["start.station.name"])
group_by(citibikeData,"start.station.name")
library(dplyr)
group_by(citibikeData,"start.station.name")
citibikeData <- read.csv("Columbia Computer Science/Introduction to Data Visualization/Exploratory Data Analysis/201901-citibike-tripdata.csv")
group_by(citibikeData,"start.station.name")
View(group_by(citibikeData,"start.station.name"))
aggregate(nrow(citibikeData), by=citibikeData["start.station.name"])
aggregate(nrow(citibikeData), by=citibikeData["start.station.name"], fun=sum)
aggregate(nrow(citibikeData), by=citibikeData["start.station.name"], FUN=sum)
citibikeData %>% group_by("start.station.name") %>% summarise(sum(nrow(citibikeData)))
citibikeData %>% group_by("start.station.name") %>% summarise(sum(nrow))
citibikeData %>% group_by("start.station.name")
rowsum(citibikeData, "start.station.name")
rowsum(citibikeData, "start.station.name")
rowsum(citibikeData, group = "start.station.name")
gender_distribution_by_station <- citibikeData %>%
select(start.station.name, genderDist) %>%
group_by(start.station.name) %>%
summarise(genderDist = nrow(subset(citibikeData, gender==2))/nrow(citibikeData))
gender_distribution_by_station <- citibikeData %>%
select(start.station.name) %>%
group_by(start.station.name) %>%
summarise(genderDist = nrow(subset(citibikeData, gender==2))/nrow(citibikeData))
View(gender_distribution_by_station)
View(gender_distribution_by_station)
total_rows <- nrow(citibikeData)
gender_distribution_by_station <- citibikeData %>%
select(start.station.name, gender) %>%
group_by(start.station.name) %>%
summarise(genderDist = nrow(subset(citibikeData, gender==2))/total_rows)
(citibikeData)
subset(citibikeData, gender==2)
gender_distribution_by_station <- female_rides %>%
select(start.station.name) %>%
group_by(start.station.name) %>%
summarise(genderDist = nrow(female_rides)/total_rows)
female_rides <- subset(citibikeData, gender==2)
gender_distribution_by_station <- female_rides %>%
select(start.station.name) %>%
group_by(start.station.name) %>%
summarise(genderDist = nrow(female_rides)/total_rows)
View(gender_distribution_by_station)
gender_distribution_by_station <- female_rides %>%
gender_distribution_by_station <- female_rides %>%
gender_distribution_by_station <- female_rides %>%
select(start.station.name) %>%
group_by(start.station.name) %>%
summarise(genderDist = nrow(subset(female_rides, start.station.name = start.station.name))/total_rows)
gender_distribution_by_station <- female_rides %>%
select(start.station.name) %>%
group_by(start.station.name)
View(gender_distribution_by_station)
data <- read.csv("C:/Users/aaron/Downloads/dds_data.csv")
View(data)
library(dplyr)
sum(data[,4])
sum(data[,5])
data %>% group_by(Ethnicity)
data %>% group_by(Ethnicity) %>% sum(Expenditures)
data[,"Expenditures"] %>% group_by(Ethnicity) %>% sum(Expenditures)
data %>% group_by(Ethnicity) %>% sum(Expenditures)
data %>% group_by(Ethnicity)
data %>% group_by(Ethnicity) %>% summarise(Expenditures = sum(Expenditures))
data$totalEnthnicity = data %>% group_by(Ethnicity) %>% summarise(totalEnthnicity = sum(Ethnicity))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = sum(Expenditures), Ethnicity = count(Ethnicity))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = sum(Expenditures), count(Ethnicity))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = avg(Expenditures))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = average(Expenditures))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = mean(Expenditures))
data %>% group_by(Ethnicity,Age_Cohort) %>% summarise(Expenditures = mean(Expenditures))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = mean(Expenditures), numEntries = nrows(data))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = mean(Expenditures), numEntries = nrow(data))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = mean(Expenditures), numEntries = nrow(data[,"Ethnicity"]))
data %>% group_by(Ethnicity) %>% summarise(Expenditures = mean(Expenditures), numEntries = sum(data))
data %>% group_by(Ethnicity, Age_Cohort=="6-12") %>% summarise(Expenditures = mean(Expenditures), numEntries = sum(data))
data %>% group_by(Ethnicity, Age_Cohort=="6-12") %>% summarise(Expenditures = mean(Expenditures))
data %>% group_by(Age_Cohort) %>% summarise(Expenditures = mean(Expenditures))
data %>% group_by(Ethnicity, Age_Cohort) %>% summarise(Expenditures = mean(Expenditures))
View(data %>% group_by(Ethnicity, Age_Cohort) %>% summarise(Expenditures = mean(Expenditures)))
View(data %>% group_by(Ethnicity, Age_Cohort) %>% summarise(Expenditures = mean(Expenditures), count = rowsum(data)))
View(data %>% group_by(Ethnicity, Age_Cohort) %>% summarise(Expenditures = mean(Expenditures), count = rowsum(data)))
View(data %>% group_by(Ethnicity, Age_Cohort) %>% summarise(Expenditures = mean(Expenditures), count = n()))
setwd
##Set working directory for easy access to brooklyn bridge csv
setwd("C:/Users/aaron/OneDrive/Documents/Columbia Computer Science/Introduction to Data Visualization/Interactive Visualization/")
brooklyn_bridge <- read.csv("Brooklyn_Bridge_Automated_Pedestrian_Counts.csv")
##Set working directory for easy access to brooklyn bridge csv
setwd("C:/Users/aaron/OneDrive/Documents/Columbia Computer Science/Introduction to Data Visualization/Interactive Visualization/")
brooklyn_bridge <- read.csv("Brooklyn_Bridge_Automated_Pedestrian_Counts.csv")
View(brooklyn_bridge)
library(jsonlite)
##Set working directory for easy access to brooklyn bridge csv
setwd("C:/Users/aaron/OneDrive/Documents/Columbia Computer Science/Introduction to Data Visualization/Interactive Visualization/")
brooklyn_bridge <- read.csv("Brooklyn_Bridge_Automated_Pedestrian_Counts.csv")
##Set working directory for easy access to brooklyn bridge csv
setwd("C:/Users/aaron/OneDrive/Documents/Columbia Computer Science/Introduction to Data Visualization/Interactive Visualization/Brooklyn_Bridge/")
brooklyn_bridge <- read.csv("Brooklyn_Bridge_Automated_Pedestrian_Counts.csv")
View(brooklyn_bridge)
library(jsonlite)
##Set working directory for easy access to brooklyn bridge csv
setwd("C:/Users/aaron/OneDrive/Documents/Columbia Computer Science/Introduction to Data Visualization/Interactive Visualization/Brooklyn_Bridge/")
brooklyn_bridge <- read.csv("Brooklyn_Bridge_Automated_Pedestrian_Counts.csv")
View(brooklyn_bridge)
